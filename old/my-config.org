#+title: My EMACS config
#+PROPERTY: header-args:emacs-lisp :tangle.el :mkdirp yes

* General
** Define variables
*** Backup Directory
    #+BEGIN_SRC emacs-lisp
      (defvar *personal/backup-directory*
	(expand-file-name "backup/" user-emacs-directory))
    #+END_SRC
*** Custom File
    #+BEGIN_SRC emacs-lisp
      (defvar *personal/custom-file*
	(expand-file-name "custom.el" user-emacs-directory))
    #+END_SRC
   
** Setup backup directory
 #+BEGIN_SRC emacs-lisp
   ;; Create backup directory if not exist
   (unless (file-exists-p *personal/backup-directory*)
     (mkdir *personal/backup-directory*))

   ;; Set backup directory
   (setq backup-directory-alist
	 `(("." . ,*personal/backup-directory*)))

 #+END_SRC
** Setup custom file
 #+BEGIN_SRC emacs-lisp
   ;; set custom file
   (setq custom-file *personal/custom-file*)

   ;; create custom file if not exist
   (unless (file-exists-p custom-file)
     (with-temp-buffer
       (write-file custom-file)))

   ;; load custom file
   (load custom-file)
 #+END_SRC
** Setup GUI
*** Disable annoying GUI stuff
    #+BEGIN_SRC emacs-lisp
      ;; Disable toolbar
      (tool-bar-mode -1)

      ;; Disable blinking cursor		 
      (blink-cursor-mode -1)

      ;; Disable scroll all mode
      (scroll-all-mode -1)

      ;; Disable emacs start screen
      (setq inhibit-splash-screen t)

      ;; Remap yes-or-no to y-or-n
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** Activate good GUI stuff
    #+BEGIN_SRC emacs-lisp
      ;; Show matchting parens
      (show-paren-mode t)

      ;; Highlight current line
      (global-hl-line-mode t)

      ;; Show line numbers
      (global-display-line-numbers-mode t)

      ;; Show column numbers
      (setq column-number-mode t)

      ;; Use ibuffer for list-buffers
      (defalias 'list-buffers 'ibuffer)

      ;; Set hack as default font
      (set-face-attribute 'default nil
			  :family "Hack"
			  :height 110
			  :weight 'normal
			  :width 'normal)
    #+END_SRC
** Other Config
   #+begin_src emacs-lisp
     (setq gc-cons-threshold 100000000)
     (setq read-process-output-max (* 1024 1024))
   #+end_src
* Setup Packages
** Setup Theme
   #+BEGIN_SRC emacs-lisp
     ;; Load Spacemacs
     (use-package spacemacs-theme
       :ensure t
       :defer t
       :init (load-theme 'spacemacs-dark t))
   #+END_SRC
** Ace Window
   #+BEGIN_SRC emacs-lisp
     ;; Ace-Window to quickly move a round windows
     (use-package ace-window
       :ensure t
       :bind ("C-c o" . 'ace-window))
   #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp
     ;; Install dashboard
     (use-package dashboard
       :ensure t
       :config
       (setq dashboard-startup-banner nil)
       (setq dashboard-items
	     '((recents . 5)
	       (projects .5)))
       (dashboard-setup-startup-hook))
   #+END_SRC
** Which-key
   #+BEGIN_SRC emacs-lisp
     ;; Install which-key
     (use-package which-key
       :ensure t
       :init (which-key-mode))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :config
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-mode 1))
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind (("C-x g" . magit-status)))
   #+END_SRC
** Helm
   #+BEGIN_SRC emacs-lisp
     ;; Install helm
     (use-package helm
       :ensure t
       :bind
       (("M-x" . helm-M-x)
	("C-x C-f" . helm-find-files))
       :config
       (setq helm-mode-fuzzy-match t)
       (helm-mode 1))

     ;; Install helm for projectile
     (use-package helm-projectile
       :ensure t
       :config
       (helm-projectile-on))
   #+END_SRC
** PDF-Tools
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :ensure t
       :hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1)))
       :config
       (pdf-tools-install)
       (add-to-list 'auto-mode-alist (cons "\\.pdf$" 'pdf-view-mode))
       ;; open pdfs scaled to fit page
       (setq-default pdf-view-display-size 'fit-page)
       ;; automatically annotate highlights
       (setq pdf-annot-activate-created-annotations t)
       ;; use normal isearch
       (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
   #+END_SRC
** Elfeed
   #+BEGIN_SRC emacs-lisp
     (defun bjm/elfeed-load-db-and-open ()
	 (interactive)
	 (elfeed-db-load)
	 (elfeed)
	 (elfeed-search-update--force))

     (defun bjm/elfeed-save-db-and-bury ()
       (interactive)
       (elfeed-db-save)
       (elfeed-db-compact)
       (quit-window))

     (defun bjm/elfeed-mark-all-as-read ()
       (interactive)
       (mark-whole-buffer)
       (elfeed-search-untag-all-unread))

     (use-package elfeed
       :ensure t
       :bind (:map elfeed-search-mode-map
		   ("q" . bjm/elfeed-save-db-and-bury)
		   ("Q" . bjm/elfeed-save-db-and-bury))
       :config
       (setq elfeed-db-directory "~/Dropbox/shared/elfeeddb"))

     (use-package elfeed-org
       :ensure t
       :after elfeed
       :config
       (elfeed-org)
       (setq rmh-elfeed-org-files
	     (list "~/.emacs.d/feeds.org")))
   #+END_SRC
** Adaptive Wrap
   #+BEGIN_SRC emacs-lisp
     (use-package adaptive-wrap
       :ensure t)
   #+END_SRC
** Try
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC
** Eyebrowsen
   #+BEGIN_SRC emacs-lisp
     (use-package eyebrowse
       :ensure t
       :config (eyebrowse-mode t))
   #+END_SRC
** Multiple-Cursors
   #+begin_src emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :bind
       (("C-c ]" . mc/mark-next-like-this)
	("C-c C-]" . mc/mark-next-like-this)
	("C-c l" . mc/edit-lines)))
   #+end_src
   
* Programming languages
** Rainbow-Delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :hook (prog-mode . rainbow-delimiters-mode))
   #+END_SRC
** Company Auto-Complete
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config
       (setq company-idle-delay 0.2
	     company-minimum-prefix-length 2
	     company-require-match nil
	     company-dabbrev-ignore-case nil
	     company-dabbrev-downcase nil)
       :init
       (global-company-mode t))

     ;; Documentation popups for Company
     (use-package company-quickhelp 
       :ensure t
       :config
       (setq company-quickhelp-delay 0.1
	     company-tooltip-align-annotations t)
       :init
       (add-hook 'global-company-mode-hook #'company-quickhelp-mode))
   #+END_SRC
** Lisps
*** Paredit
    #+BEGIN_SRC emacs-lisp
      (use-package paredit
	:ensure t)
    #+END_SRC
*** Common-Lisp
    #+BEGIN_SRC emacs-lisp
      ;; Install slime to interact with common-lisp
      (use-package slime
	:ensure t
	:init (load (expand-file-name "~/quicklisp/slime-helper.el"))
	:config
	(setq inferior-lisp-program "sbcl"
	      slime-contribs '(slime-company slime-fancy slime-repl slime-trace-dialog)
	      slime-net-coding-system 'utf-8-unix)
	(add-hook 'slime-load-hook (lambda () (require 'slime-fancy))))

      ;; Autocomplete backend for common-lisp
      (use-package slime-company
	:ensure t
	:defer t)

      (defun personal/lisp-mode-hook ()
	(paredit-mode +1)  
	(setq indent-tabs-mode nil))

      ;; Load personal/lisp-mode-hook in lisp buffers
      (add-hook 'lisp-mode-hook 'personal/lisp-mode-hook)
      (add-hook 'lisp-interaction-mode-hook 'personal/lisp-mode-hook)
    #+END_SRC
*** Emacs-Lisp
    #+BEGIN_SRC emacs-lisp
      (use-package eros
	:ensure t)

      (use-package emacs-lisp-mode
	:straight nil
	:bind (("C-c C-f" . find-function)
	       ("C-c C-v" . find-variable))
	:hook (emacs-lisp-mode . (lambda ()
				   (paredit-mode t)
				   (eros-mode t)
				   (eldoc-mode t))))
   #+END_SRC
** Python
   #+begin_src emacs-lisp
     (use-package elpy
       :ensure t
       :defer t
       :init
       (advice-add 'python-mode :before 'elpy-enable))
   #+end_src
* Text-Editing
** Text-Mode Function
   #+BEGIN_SRC emacs-lisp
     (defun personal/text-mode-hook ()
       (visual-line-mode t)
       (adaptive-wrap-prefix-mode t)
       (turn-off-auto-fill))
   #+END_SRC
** Latex
   #+BEGIN_SRC emacs-lisp
     (use-package tex
       :straight auctex
       :defer
       :defines TeX-view-program-list TeX-view-program-selection
       :init
       (setq TeX-debug-bad-boxes t
	     TeX-parse-self t
	     TeX-source-correlate-mode t
	     TeX-auto-save t
	     TeX-auto-untabify t)
       :config
       (setq-default TeX-master nil)
       (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)) 
	     TeX-view-program-selection '((output-pdf "PDF Tools"))  
	     TeX-source-correlate-start-server t)
       (add-hook 'TeX-after-compilation-finished-functions
		 #'TeX-revert-document-buffer)
       (add-hook 'LaTeX-mode-hook 'personal/text-mode-hook))

     (use-package reftex
       :ensure t
       :diminish reftex-mode
       :hook (LaTeX-mode . turn-on-reftex)
       :init
       (setq reftex-plug-into-AUCTeX t
	     reftex-ref-style-default-list '("Cleveref" "Varioref" "Default")))

     (use-package latex-extra
       :ensure t
       :diminish latex-extra-mode
       :hook (LaTeX-mode . latex-extra-mode)
       :config
       (add-hook 'latex-extra-mode-hook 'turn-off-auto-fill))

     (use-package company-auctex
       :ensure t
       :hook (TeX-mode . company-auctex-init))

     (use-package auctex-latexmk
       :ensure t
       :hook (LaTeX-mode . auctex-latexmk-setup)
       :init
       (setq auctex-latexmk-inherit-TeX-PDF-mode t))


 #+END_SRC
** ORG
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :straight org-plus-contrib
       :mode (("\\.\\(org\\|org_archive\\)$" . org-mode))
       :config
       (add-hook 'org-mode-hook 'personal/text-mode-hook))

     ;; Org-Bullets
     (use-package org-bullets
       :ensure t
       :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

     (use-package company-bibtex
       :ensure t
       :hook
       (org-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-bibtex)))))

     (use-package company-reftex
       :ensure t
       :hook
       (org-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-reftex-labels company-reftex-citations)))))



     (use-package epresent
       :ensure t)

     ;;(global-set-key "\C-cl" 'org-store-link)
     ;;(global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cc" 'org-capture)
     ;;(global-set-key "\C-cb" 'org-switchb)
 #+END_SRC
* ORG-Roam
   #+BEGIN_SRC emacs-lisp
     (use-package org-roam
       :ensure t
       :hook
       (after-init . org-roam-mode)
       :custom
       (org-roam-directory "~/ORG-MyLife")
       (org-roam-completion-system 'helm)
       (org-roam-index-file "index.org")
       :bind (:map org-roam-mode-map
		   (("C-c n l" . org-roam)
		    ("C-c n f" . org-roam-find-file)
		    ("C-c n g" . org-roam-show-graph))
		   :map org-mode-map
		   (("C-c n i" . org-roam-insert))
		   (("C-c n I" . org-roam-insert-immediate))))

     (use-package company-org-roam
       :ensure t
       :config
       (push 'company-org-roam company-backends))

     (use-package org-journal
       :ensure t
       :defer t
       :bind
       ("C-c n j" . org-journal-new-entry)
       :custom
       (org-journal-date-prefix "#+title: ")
       (org-journal-file-format "%Y-%m-%d.org")
       (org-journal-dir "~/ORG-MyLife/journal")
       (org-journal-date-format "%A, %d %B %Y")
       (org-journal-enable-agenda-integration t))



     (setq org-agenda-files (directory-files-recursively "~/ORG-MyLife/" "\\.org$"))
     (setq org-todo-keywords
	   (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
		   (sequence "WAITING(w@/!)" "INACTIVE(i)" "SOMEDAY(s)" "|" "CANCELLED(c@/!)"))))
     (setq org-todo-keyword-faces
	   (quote (("TODO" :foreground "red" :weight bold)
		   ("NEXT" :foreground "blue" :weight bold)
		   ("DONE" :foreground "forest green" :weight bold)
		   ("WAITING" :foreground "orange" :weight bold)
		   ("INACTIVE" :foreground "magenta" :weight bold)
		   ("SOMEDAY" :foreground "cyan" :weight bold)
		   ("CANCELLED" :foreground "forest green" :weight bold))))
     (setq org-use-fast-todo-selection t)
     (setq org-todo-state-tags-triggers
	   (quote (("CANCELLED" ("CANCELLED" . t))
		   ("WAITING" ("WAITING" . t))
		   ("HOLD" ("WAITING") ("HOLD" . t))
		   (done ("WAITING") ("HOLD"))
		   ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
		   ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
		   ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))


     ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
     (setq org-refile-targets (quote ((nil :maxlevel . 9)
				      (org-agenda-files :maxlevel . 9))))

     ;;  Be sure to use the full path for refile setup
     (setq org-refile-use-outline-path t)
     (setq org-outline-path-complete-in-steps nil)

     ;; Allow refile to create parent tasks with confirmation
     (setq org-refile-allow-creating-parent-nodes 'confirm)



     (setq org-agenda-tags-column org-tags-column)
     (setq org-agenda-sticky t)
     (setq org-agenda-inhibit-startup nil)
     (setq org-agenda-dim-blocked-tasks nil)
     (setq org-agenda-compact-blocks nil)

     (setq org-agenda-time-grid
	   (quote
	    ((daily today remove-match)
	     (800 1200 1600 2000)
	     "......" "----------------")))

     (setq org-agenda-tags-todo-honor-ignore-options t)
     (setq org-deadline-warning-days 10)


     (setq org-agenda-custom-commands
	   '(("c" "Simple agenda view"
	      ((agenda "")
	       (alltodo "")))))
   #+END_SRC
